# -*- coding: utf-8 -*-
"""Task2: Prediction Using UnSupervised ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Itey4T4hvBEbjssmebF8OaYjZr32LRo

# ***Name: Ahmed Nasser Ahmed Hassan***
**GRIP : *The Sparks Foundation***
> Data Science and Business Analytics Intern

---
**Task2: *Prediction Using UnSupervised ML***
> K-means Clustering
---
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from sklearn import datasets
from sklearn.cluster import KMeans

iris = datasets.load_iris()
iris_df = pd.DataFrame(iris.data, columns = iris.feature_names)
iris_df.head()

"""#### Finding the optimum number of clusters for K Means
#### Determining the value of K
"""

x = iris_df.iloc[:, [0, 1, 2, 3]].values
wcss = []

for i in range(1, 11):
    kmeans = (KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)).fit(x)
    wcss.append(kmeans.inertia_)

"""#### Plotting the results into a line graph"""

plt.plot(range(1, 11), wcss)
plt.title('elbow method')
plt.xlabel('no. of clusters')
plt.ylabel('WCSS')
plt.show()

"""It is called 'elbow method' from the above graph, the optimum clusters is where the elbow occurs. This is when the within cluster sum of squares (WCSS) doesn't decrease significantly with every iteration.

### So the number of clusters is ***3***.

# **Creating the kmeans classifier**
"""

kmeans = KMeans(n_clusters=3, init='k-means++', max_iter=300, n_init=10, random_state=1)
y_kmeans = kmeans.fit_predict(x)

"""#### Visualising the clusters -> On the first 2 columns"""

plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s=100, c='red', label='Iris-setosa')
plt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1], s=100, c='blue', label='Iris-versicolour')
plt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1], s=100, c='green', label='Iris-virginica')

# Plotting the Centroids of the clusters
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s=100, c='yellow', label='Centroids')
plt.legend()